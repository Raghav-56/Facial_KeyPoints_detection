import subprocess
from pathlib import Path
import cv2
from config.logger_config import logger


def run_openface(video_path, output_dir, openface_binary):
    video_file = Path(video_path)
    output_folder = Path(output_dir)
    openface_exe = Path(openface_binary)

    if not video_file.exists():
        raise FileNotFoundError(f"Input video file not found: {video_file}")
    if not openface_exe.exists():
        raise FileNotFoundError(f"OpenFace binary not found: {openface_exe}")

    output_folder.mkdir(parents=True, exist_ok=True)
    command = [
        str(openface_exe),
        "-f",
        str(video_file),
        "-out_dir",
        str(output_folder),
    ]
    logger.info("Running OpenFace on video: %s", video_file)
    subprocess.run(command, check=True, capture_output=True, text=True)

    csv_files = list(output_folder.glob("*.csv"))
    if not csv_files:
        raise FileNotFoundError(
            f"No CSV output was generated by OpenFace in {output_folder}"
        )
    
    csv_file = csv_files[0]
    logger.info("CSV file created: %s", csv_file)
    return str(csv_file)


def get_video_info(video_path):
    cap = cv2.VideoCapture(str(Path(video_path)))
    if not cap.isOpened():
        return None

    info = {
        "filename": Path(video_path).name,
        "path": str(video_path),
        "frame_count": int(cap.get(cv2.CAP_PROP_FRAME_COUNT)),
        "fps": cap.get(cv2.CAP_PROP_FPS),
        "width": int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)),
        "height": int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)),
        "format": Path(video_path).suffix.lower().replace(".", ""),
    }

    if info["fps"] > 0:
        duration_sec = info["frame_count"] / info["fps"]
        info["duration"] = duration_sec
        mins, secs = divmod(int(duration_sec), 60)
        info["duration_str"] = f"{mins}:{secs:02d}"
    else:
        info["duration"] = 0
        info["duration_str"] = "0:00"

    cap.release()
    return info
